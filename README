taskproc (task processor) is a simple Python module designed for
running a set of tasks which can have dependencies on each other. The
idea is to have a make-like dependency resolution within a Python
program. Tasks are queued for execution until their requirements are
met. When executed, tasks can return a value which is then passed down
to dependent tasks.

There are two modes of task execution: simple execution of tasks in
the main program or multi-threaded execution.

taskproc is licensed under the Apache 2.0 license and is copyright
Jeremy Sanders. It should be compatible with Python 2.6+ and Python
3.2+.

For more documentation see
  http://taskproc.readthedocs.org/

This simple example prints 1, waits 5 seconds, prints 2 and 3, waits 5
seconds, then prints 4.

  import time
  import taskproc

  def taskfunc(dep_results, num):
      print(num)
      time.sleep(5)

  task1 = taskproc.Task(func=taskfunc, args=(1,))
  task2 = taskproc.Task(func=taskfunc, args=(2,), requires=[task1])
  task3 = taskproc.Task(func=taskfunc, args=(3,), requires=[task1])
  task4 = taskproc.Task(func=taskfunc, args=(4,), requires=[task1,task2])

  queue = taskproc.TaskQueueThread(2)
  queue.add(task4)
  with queue:
      queue.process()
